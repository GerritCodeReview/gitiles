{
  "comments": [
    {
      "key": {
        "uuid": "b137c3c2_29a40dce",
        "filename": "gitiles-servlet/src/main/java/com/google/gitiles/doc/html/HtmlBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-02-11T21:29:30Z",
      "side": 1,
      "message": "In what situations would these get passed to callers? Such elements would get stripped out earlier in the parsing process if they showed up in UGC, is that the case? If so, then I think IAE is ok behavior.\n\nIf passing unsafe UGC to the parser produces IAE, I think that\u0027s not what we want, we don\u0027t want HTTP 500 on those responses. A custom exception type or return value that the handler can catch would be better, that way we can say something like \"this document could not be rendered due to unsafe HTML\".",
      "revId": "743ca7487cb3ed137e9e08a740241f182f0045e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b137c3c2_492b0180",
        "filename": "gitiles-servlet/src/main/java/com/google/gitiles/doc/html/HtmlBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-11T22:00:36Z",
      "side": 1,
      "message": "No. Elements are created by MarkdownToHtml using hard coded element names. IAE is thrown if we developers wrote something incorrectly into MarkdownToHtml.\n\nHTML that appears in the source document we parsed is flat out discarded and never makes it to HtmlBuilder. So bad input will not cause IAE.\n\nIAE should never be thrown. Unless we wrote code wrong in MarkdownToHtml. Hence it really is a \"never gonna happen except when it does\" sort of thing.",
      "parentUuid": "b137c3c2_29a40dce",
      "revId": "743ca7487cb3ed137e9e08a740241f182f0045e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f67bf134_cb9ad582",
        "filename": "gitiles-servlet/src/main/java/com/google/gitiles/doc/html/HtmlBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-02-13T04:23:20Z",
      "side": 1,
      "message": "CID 29319 (#1 of 1): EC: Comparing incompatible types for equality (FB.EC_UNRELATED_TYPES)\n1. defect: Call to com.google.common.collect.ImmutableSet\u003cjava.lang.String\u003e.equals(String).\n\nfrom coverity scan.\nIn com.​google.​gitiles.​doc.​html.​HtmlBuilder.​close(java.​lang.​String): This method calls equals(Object) on two references of different class types with no common subclasses. \n\nI am not entirely sure what that means, just pointing out the new error.\nIt\u0027s claimed to be medium impact, addressing correctness. From looking at the code I\u0027d guess it\u0027s a false positive.",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 140,
        "endChar": 79
      },
      "revId": "743ca7487cb3ed137e9e08a740241f182f0045e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f67bf134_4b8fc540",
        "filename": "gitiles-servlet/src/main/java/com/google/gitiles/doc/html/HtmlBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-13T05:38:51Z",
      "side": 1,
      "message": "Thanks Stefan, Coverity is correct, this is a common bug and I fell into it. I will send a fix commit shortly.",
      "parentUuid": "f67bf134_cb9ad582",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 140,
        "endChar": 79
      },
      "revId": "743ca7487cb3ed137e9e08a740241f182f0045e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b137c3c2_6928c582",
        "filename": "gitiles-servlet/src/main/java/com/google/gitiles/doc/html/HtmlBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-02-11T22:01:59Z",
      "side": 1,
      "message": "What about \u0026# entities?",
      "revId": "743ca7487cb3ed137e9e08a740241f182f0045e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "912c7f7c_880c173a",
        "filename": "gitiles-servlet/src/main/java/com/google/gitiles/doc/html/HtmlBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-11T22:03:45Z",
      "side": 1,
      "message": "Answered in the other CL; but they can\u0027t appear here so we don\u0027t have to allow them here.\n\nThis method only accepts hand-written entities that we have hard coded into the HTML formatter to match up with AST nodes the parser creates.",
      "parentUuid": "b137c3c2_6928c582",
      "revId": "743ca7487cb3ed137e9e08a740241f182f0045e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}