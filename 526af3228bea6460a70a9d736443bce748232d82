{
  "comments": [
    {
      "key": {
        "uuid": "0ed09ce3_8c9b072e",
        "filename": ".gitignore",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-04T18:37:14Z",
      "side": 1,
      "message": "Emacs backup files? ;)",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 2
      },
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee926865_abc78981",
        "filename": ".gitignore",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-06T16:57:39Z",
      "side": 1,
      "message": "yep :)",
      "parentUuid": "0ed09ce3_8c9b072e",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e8e1443_eec51f59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1012758
      },
      "writtenOn": "2016-04-05T01:11:40Z",
      "side": 1,
      "message": "Interesting. Besides being able to use the same build system internally at Google and externally, what\u0027s the benefit of this change? Is Bazel faster than Buck externally?",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce83e41b_0a533bbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-06T16:57:39Z",
      "side": 1,
      "message": "There are a couple of advantages:\n\n* Bazel has much better isolation of subprocesses: each action is run in a sandbox. This provides better correctness guarantees, and should do away with the need to run \"buck clean\".\n\n* The test caching is a little more advanced. In particular, --no-results-cache should not be necessary for Bazel (failures aren\u0027t cached).\n\n* Bazel comes with Errorprone built in, http://errorprone.info/bugpatterns\n\n* Bazel has extensible rules (see eg.: https://github.com/bazelbuild/rules_scala).  In particular, we have been talking a little about using TypeScript instead of plain JavaScript. With bazel, it is easy to add support for TypeScript (there are google internal rules which should take little effort to open up.)\n\n* Bazel has support for annotating the build, in particular, for driving Kythe indexers.\nSince I\u0027m looking at how Kythe (kythe.io) could be integrated with gitiles, it seems fitting to \"dogfood\" that with gitiles.\n\n(if you don\u0027t know what Kythe is, try going to https://code.google.com/p/chromium/codesearch#chromium/src/base/strings/nullable_string16.h and clicking on any identifier to get a feel for things.)",
      "parentUuid": "4e8e1443_eec51f59",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e8e1443_2e100737",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1012758
      },
      "writtenOn": "2016-04-06T19:39:03Z",
      "side": 1,
      "message": "Thanks for the thorough explanation! Those are all convincing advantages. A couple more questions:\n1. Do we plan to use TypeScript / JavaScript for new functionality? I think Gitiles is static and the code base currently doesn\u0027t have any JavaScript file.\n\n2. Besides TypeScript, have you considered alternatives like GWT or Closure-style JavaScript? Gitiles is mostly written in Java and I\u0027ve had good experience developing Gerrit in GWT / Java. As for Closure, it has much better support for minification and the Bazel rules for Closure are mostly ready at https://github.com/bazelbuild/rules_closure. Gitiles is already using Closure (Soy) Templates so going with Closure seems more natural than using TypeScript.\n\n3. Adding Grok / Kythe support would be a huge plus. I\u0027ve always thought about integrating it with Gerrit but Kythe wasn\u0027t open sourced until recently. Looking forward to a prototype!\n\n4. Apparently I don\u0027t know that CodeSearch was open sourced. How was it possible without Grok / Kythe?",
      "parentUuid": "ce83e41b_0a533bbe",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee7a6832_2b511956",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-07T10:39:24Z",
      "side": 1,
      "message": "1. - not in gitiles, but it would be something to consider for PolyGerrit.  I\u0027m still looking at kythe/gitiles to make up my mind on how Kythe integration into Gitiles would work.\n\n2. GWT has already been tried for Gerrit proper, and is being discarded. That said, until it\u0027s fully gone, we would have to have GWT rules out there too. The bright side is that I have access to the google internal ones (written in Java and quite horrible) to understand what they should do, and this could give me an excuse to finalize my vendetta against them. \n\n3. Yes, we dearly want this for Google use too.\n\n4. cs.chromium.org is not open source; it\u0027s driven by our internal code search code base, and our internal version of Kythe.",
      "parentUuid": "4e8e1443_2e100737",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e71e053_adee7dd1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1012758
      },
      "writtenOn": "2016-04-07T10:49:32Z",
      "side": 1,
      "message": "2. Buck has native support for gwt_binary(). For gwt_module() we use DavidO\u0027s bucklet here: https://github.com/davido/bucklets/blob/master/gwt_module.bucklet. Bazel will probably provide something similar.\n4. Interesting. Seems like https://github.com/google/codesearch is unrelated to cs.chromium.org :P",
      "parentUuid": "ee7a6832_2b511956",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce6be468_8a660b24",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-07T11:19:44Z",
      "side": 1,
      "message": "\u003e For gwt_module() we use DavidO\u0027s bucklet\n\nLet\u0027s give credit where credit is due: All bucklet code was extracted from Shawn\u0027s Buck implementation in Gerrit.",
      "parentUuid": "2e71e053_adee7dd1",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee7a6832_6b8f21ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-07T16:46:37Z",
      "side": 1,
      "message": "I forgot to mention this, but the Bazel rules for TS run the output through Closure, so TS would address that in one fell swoop.",
      "parentUuid": "4e8e1443_2e100737",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e809c4d_2c7ff3ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1012758
      },
      "writtenOn": "2016-04-07T20:41:19Z",
      "side": 1,
      "message": "Does it involve using Sickle (https://github.com/angular/sickle)? I am under the impression that TS output is not compatible with Closure Compiler\u0027s Advanced mode out of the box, so only Simple optimizations can be used.",
      "parentUuid": "ee7a6832_6b8f21ea",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce7cc459_c23a821b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-08T12:58:04Z",
      "side": 1,
      "message": "a quick glance shows that the rules mention \u0027sickle\u0027, but as an optional part. I am not sure of the details though.",
      "parentUuid": "0e809c4d_2c7ff3ae",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae7f904b_4147529a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1012758
      },
      "writtenOn": "2016-04-08T16:28:22Z",
      "side": 1,
      "message": "Got it, thanks!",
      "parentUuid": "ce7cc459_c23a821b",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef294a8_8ec11b00",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-04T18:37:14Z",
      "side": 1,
      "message": "Why? I think it can co-exist with Buck driven build?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ed09ce3_ac984331",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-04T18:37:14Z",
      "side": 1,
      "message": "Nit: No trailing point on subject line.",
      "range": {
        "startLine": 7,
        "startChar": 49,
        "endLine": 7,
        "endChar": 50
      },
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee926865_cbc4d57f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-06T16:57:39Z",
      "side": 1,
      "message": "Yes, it can. I didn\u0027t think it\u0027s polished enough to be submitted though.",
      "parentUuid": "4ef294a8_8ec11b00",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef294a8_eebedf81",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-04T18:37:14Z",
      "side": 1,
      "message": "Why this file is not part of this change, when it only has this static content?",
      "range": {
        "startLine": 12,
        "startChar": 43,
        "endLine": 12,
        "endChar": 51
      },
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce83e41b_ea4427f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-06T16:57:39Z",
      "side": 1,
      "message": "It\u0027s something that should be fixed on the bazel side (it might already be; not sure.)",
      "parentUuid": "4ef294a8_eebedf81",
      "range": {
        "startLine": 12,
        "startChar": 43,
        "endLine": 12,
        "endChar": 51
      },
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef294a8_cebb2390",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-04T18:37:14Z",
      "side": 1,
      "message": "What\u0027s about IDE (Eclipse) integration? What about publishing the artifact to Maven Repository, what is done with buck build api_install? For this you would need Javadocs and sources. in addition to final artifact.",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e8e1443_0ee0abe1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1012758
      },
      "writtenOn": "2016-04-05T01:11:40Z",
      "side": 1,
      "message": "An interface for IDE integration is on Bazel\u0027s roadmap for 0.3: http://bazel.io/roadmap.html.\n\nAs an aside, Gitiles\u0027 bucklets/tools/eclipse.py and Gerrit\u0027s tools/eclipse/project.py should probably go away now that Buck supports Eclipse: https://buckbuild.com/contributing/development.html.",
      "parentUuid": "4ef294a8_cebb2390",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e89e03a_2de56df2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1012758
      },
      "writtenOn": "2016-04-05T01:14:19Z",
      "side": 1,
      "message": "No I was totally wrong. Buck still doesn\u0027t have native Eclipse support as of now :(",
      "parentUuid": "4ef294a8_cebb2390",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee926865_4ba625e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-06T16:58:50Z",
      "side": 1,
      "message": "I\u0027ll have a look at publishing to Maven. It would likely need to be building a command, which has to be run from the command line, since actions in Bazel can\u0027t contact the network.",
      "parentUuid": "4ef294a8_cebb2390",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef294a8_0e836bcb",
        "filename": "WORKSPACE",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-04T18:37:14Z",
      "side": 1,
      "message": "How staging works here? One of the most important features, that Shawn implemented in Buck driven build in Gerrit (from the beginning on), and is still missing (in fact makes it unusable) in Buck\u0027s native `buck fetch` command implementation: [1], is the fact, that under these circumstances, the re-fetching of Maven artifacts takes place:\n\n* wipe out the cache and buck-out directries\n* upgrade Buck version\n\nI would never accept any build toolchain (for daily use) with this drawback.\n\n* [1] https://github.com/facebook/buck/issues/602",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 6,
        "endChar": 1
      },
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee926865_ebc1916c",
        "filename": "WORKSPACE",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-06T16:57:39Z",
      "side": 1,
      "message": "Yes, this works. I just checked.",
      "parentUuid": "4ef294a8_0e836bcb",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b0622a0_c8a06f99",
        "filename": "WORKSPACE",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-09-11T06:47:28Z",
      "side": 1,
      "message": "Unfortunately, you were wrong, it doesn\u0027t work, I just re-checked. Steps to reproduce:\n\n* 1. set up a project with this WORKSPACE:\n\n  maven_jar(\n    name \u003d \u0027guava\u0027,\n    artifact \u003d \u0027com.google.guava:guava:19.0\u0027,\n    sha1 \u003d \u00276ce200f6b23222af3d8abb6b6459e6c44f4bb0e9\u0027,\n  )\n\n* 2. add this BUILD file:\n\n  java_library(\n    name \u003d \u0027guava\u0027,\n    exports \u003d [\u0027@guava//jar\u0027],\n    visibility \u003d [\u0027//visibility:public\u0027],\n  )\n\n* 3. build :guava rule\n* 4. verify that external repository now correctly includes guava.jar:\n\n  $ ls $(bazel info output_base)/external/guava/jar/guava-19.0.jar\n /home/davido/.cache/bazel/_bazel_davido/1c05526fe8c8cba2b825c0ac3eea91e4/external/guava/jar/guava-19.0.jar\n\n* 5. wipe out the output directory entirely:\n\n  bazel clean --expunge\n\n* 6. unplug ethernet cable\n\n* 7. try to rebuild :guava rule. Expectation is that the previously fetched artifact is re-used, obviously. Unfortunately it doesn\u0027t:\n\n  $ bazel build :guava\n  ERROR: /home/davido/projects/bazel_test/BUILD:27:1: no such package \u0027@guava//jar\u0027:\n  Failed to fetch Maven dependency: Could not transfer artifact com.google.guava:guava:jar:19.0 from/to\n  guava (https://repo1.maven.org/maven2/): Connection to https://repo1.maven.org refused and referenced by \u0027//:guava\u0027.\n  ERROR: Analysis of target \u0027//:guava\u0027 failed; build aborted.\n  INFO: Elapsed time: 1.635s\n\nSo basically this is broken by design in the same way, like Buck\u0027s remote_file() implementation: [1]. See maven_jar() implementation in Gerrit core and Bucklets how to get it right:\n\n  $ cd ~/.gerritcodereview/buck-cache/downloaded-artifacts\n  $ ls -1 guava-1*\n  guava-18.0.jar-cce0823396aa693798f8882e64213b1772032b09\n  guava-18.0-src.jar-45b0363545dd28412143940c0a8ee5d75b58d0d6\n  guava-19.0.jar-6ce200f6b23222af3d8abb6b6459e6c44f4bb0e9\n  guava-19.0-rc2.jar-93e17f60bc524c2610b41c494bb829c11ca89436\n  guava-19.0-rc2-src.jar-7934c16d4f41fb325b1939abdc78006b9571abe1\n  guava-19.0-src.jar-39fd7d39776feaf0c9e883fd4cdcae76721c933b\n\nWhat is needed is staging area for downloaded artifact that is entirely de-coupled from build tool chain output base and caches of specific project. Why? Because it\u0027s external dependency and guava-19.0 is not going to be changed, ever.\n\nSo instead of putting the external jar in output base for a specific project:\n\n davido@wizball:~/.cache/bazel/_bazel_davido/1c05526fe8c8cba2b825c0ac3eea91e4/external/guava/jar$ ls -all\n\n lrwxrwxrwx 1 davido users  130 Sep 11 08:00 guava-19.0.jar -\u003e /home/davido/.cache/bazel/_bazel_davido/1c05526fe8c8cba2b825c0ac3eea91e4/external/guava/com/google/guava/guava/19.0/guava-19.0.jar\n\nit must be put elewhere, so that:\n\n* a) it survives entire clean of output base for specific project (bazel clean --expunge)\n* b) previously fetched artifacts can be reused by other clones of the same project. Say i have separate clones for master ans stable branch\n* c) previously fetched artifacts can be re-used by different projects. Say Gerrit, JGit, Gitiles and 42 Gerrit plugins (standalone build mode) are cloned and built on the same machine.\n\nI just wrote this issue: [2].\n\n* [1] https://github.com/facebook/buck/issues/602\n* [2] https://github.com/bazelbuild/bazel/issues/1752",
      "parentUuid": "ee926865_ebc1916c",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef294a8_2e7e2789",
        "filename": "lib/BUILD",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-04T18:37:14Z",
      "side": 1,
      "message": "This (and other exports in this file) is way too verbose. I would expect that the native maven_jar (or a custom one, say maven_jar2) would handle both, fetching and exporting at once, with the optional list of dependencies, so instead of:\n\n  maven_jar(\n    name \u003d \u0027grappa\u0027,\n    artifact \u003d \u0027com.github.parboiled1:grappa:1.0.4\u0027,\n    sha1 \u003d \u0027ad4b44b9c305dad7aa1e680d4b5c8eec9c4fd6f5\u0027,\n  )\n  maven_jar(\n    name \u003d \u0027pegdown\u0027,\n    artifact \u003d \u0027org.pegdown:pegdown:1.4.2\u0027,\n    sha1 \u003d \u0027d96db502ed832df867ff5d918f05b51ba3879ea7\u0027,\n  )\n  java_library(\n    name \u003d \"pegdown\",\n    exports \u003d [\n        \"@pegdown//jar\",\n        \":grappa\",\n    ],\n  )\n\nI would expect to be able to say:\n\n  maven_jar(\n    name \u003d \u0027grappa\u0027,\n    artifact \u003d \u0027com.github.parboiled1:grappa:1.0.4\u0027,\n    sha1 \u003d \u0027ad4b44b9c305dad7aa1e680d4b5c8eec9c4fd6f5\u0027,\n  )\n  maven_jar2(\n    name \u003d \u0027pegdown\u0027,\n    artifact \u003d \u0027org.pegdown:pegdown:1.4.2\u0027,\n    sha1 \u003d \u0027d96db502ed832df867ff5d918f05b51ba3879ea7\u0027,\n    deps \u003d [:grappa],\n  )\n\nAlso note, that in gerrit we have \"license\", \"unsign\", \"strip\" etc. in custom maven_jar() rule.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 28,
        "endChar": 1
      },
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee926865_0b9c1d9b",
        "filename": "lib/BUILD",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-06T16:57:39Z",
      "side": 1,
      "message": "maven_jar can only appear in /WORKSPACE (so all maven jars are named \"@my_jar_name//jar:jar\"). \n\nWhat you want is currently not implemented, and I think it might be impossible for infrastructural reasons, but I\u0027ll check.\n \nYou could instead try to write your own maven_jar using a genrule, but you\u0027d have to pass special options, because the sandbox wouldn\u0027t let you contact the network, and you\u0027d get the caching problem that Buck has.\n\nWith the current setup, you could edit lib/BUILD to do                   \n\n  java_library( name \u003d \"pegdown\",\n     srcs \u003d glob([\"pegdown/**/*.java\"]),\n     deps \u003d [ \":grappa\" ])\n\nif you want to use a local checkout of pegdown.",
      "parentUuid": "4ef294a8_2e7e2789",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce6be468_aa92ef44",
        "filename": "lib/BUILD",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2016-04-07T10:32:58Z",
      "side": 1,
      "message": "I just checked, and bazel has a tool that supposedly automates generation of WORKSPACE,\n\n https://github.com/bazelbuild/bazel/blob/master/src/tools/generate_workspace/src/main/java/com/google/devtools/build/workspace/GenerateWorkspace.java\n\nI\u0027ll check it out and report back.",
      "parentUuid": "ee926865_0b9c1d9b",
      "revId": "526af3228bea6460a70a9d736443bce748232d82",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}