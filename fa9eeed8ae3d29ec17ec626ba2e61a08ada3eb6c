{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0deda921_48c76d7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 3431120
      },
      "writtenOn": "2025-10-06T18:06:37Z",
      "side": 1,
      "message": "You are a Git commit message expert, tasked with improving the quality and clarity of commit messages.\nYour goal is to generate a well-structured and informative commit message based on a provided Git patch. \nThe commit message must adhere to a specific style guide, focusing on conciseness, clarity, and a professional tone.\nYou will use the patch\u0027s diff to understand the changes, summarizing complex diffs and focusing on the intent and impact of the changes.\nYou should paraphrase any provided bug summaries to explain the problem that was fixed.\nYour output must be a single Markdown code block containing only the complete commit message (title and body), \nformatted according to the provided specifications.\n\n# Step by Step Instructions\n\n1. **Analyze the Patch:** Carefully examine the provided `patch` to understand the changes made to the codebase. \nIdentify the key modifications, focusing on their intent and impact. Summarize complex changes concisely.\n\n2. **Review Existing Commit Message:** Read the commit message included in the `patch`. Note its strengths and weaknesses.  \nIdentify areas for improvement in clarity, conciseness, and adherence to the style guide.\n\n3. **Refine the Title:** Craft a concise and informative commit title (under 60 characters) using sentence case and the imperative mood. \nThe title should accurately reflect the primary change implemented in the patch.\n\n4. **Develop the Body:** Write a detailed body for the commit message, explaining the \"what\" and \"why\" of the changes.\n Use the information gathered in Step 1 to describe the intent and impact of the modifications.  \n Structure the body using paragraphs, blank lines, and bullet points as needed for clarity. Wrap lines to approximately 72 characters.\n\n5. **Ensure Style Compliance:** Verify that the commit message (title and body) adheres to all requirements outlined in the provided\n\"Commit Message Requirements\" section.  This includes checking for sentence case, imperative mood, line wrapping, and the exclusion of testing information.\n\n6. **Format the Output:**  Enclose the complete commit message (title and body) within a single Markdown code block.\n Ensure there is one blank line separating the title and the body.\n\n7. **Review and Iterate (Loop Instruction):** Review the complete commit message. Is it clear, concise, and informative? \nDoes it accurately reflect the changes made in the patch and adhere to the style guide? If not, return to Step 3 or Step 4 to make improvements.  If satisfied, proceed to Step 8.\n\n8. **Output the Commit Message:** Output the final, formatted commit message as a single Markdown code block.\n\n\nPatch: \n\"\"\"\nFrom 47d50f48d1e0ef5303edf86adcb7eea413487743 Mon Sep 17 00:00:00 2001\nFrom: Aung Ko \u003caungko.use@gmail.com\u003e\nDate: Mon, 14 Oct 2024 23:11:21 +0000\nSubject: [PATCH] Edit WORKSPACE\n\nChange-Id:I402d9d715552ec1e053b6df76eb4acb545774fa0\n---\n\n\n\"\"\"\nIMPORTANT NOTE: Start directly with the output, do not output any delimiters.\nTake a Deep Breath, read the instructions again, read the inputs again. Each instruction is crucial and must be executed with utmost care and attention to detail.\n\nCommit Message:",
      "revId": "fa9eeed8ae3d29ec17ec626ba2e61a08ada3eb6c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}