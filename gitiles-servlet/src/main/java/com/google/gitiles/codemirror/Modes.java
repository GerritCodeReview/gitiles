// Copyright (C) 2014 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.gitiles.codemirror;

import com.google.common.base.Function;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Maps;
import com.google.common.collect.Ordering;
import com.google.common.collect.Sets;

import eu.medsea.mimeutil.MimeException;
import eu.medsea.mimeutil.MimeType;
import eu.medsea.mimeutil.MimeUtil2;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

public class Modes {
  // TODO(dborowitz): Make more of Gerrit's MIME magic reusable.
  private static final Logger log = LoggerFactory.getLogger(Modes.class);

  private static final ImmutableMap<String, String> BY_MIME_TYPE =
      ImmutableMap.<String, String> builder()
        // Begin autogenerated mappings from gen_mode_map.py.
        .put("text/apl", "apl")
        .put("text/x-asterisk", "asterisk")
        .put("text/x-csrc", "clike")
        .put("text/x-c", "clike")
        .put("text/x-chdr", "clike")
        .put("text/x-c++src", "clike")
        .put("text/x-c++hdr", "clike")
        .put("text/x-java", "clike")
        .put("text/x-csharp", "clike")
        .put("text/x-scala", "clike")
        .put("x-shader/x-vertex", "clike")
        .put("x-shader/x-fragment", "clike")
        .put("text/x-clojure", "clojure")
        .put("text/x-cobol", "cobol")
        .put("text/x-coffeescript", "coffeescript")
        .put("text/x-common-lisp", "commonlisp")
        .put("text/css", "css")
        .put("text/x-scss", "css")
        .put("text/x-less", "css")
        .put("text/x-d", "d")
        .put("text/x-diff", "diff")
        .put("text/x-django", "django")
        .put("application/xml-dtd", "dtd")
        .put("text/x-dylan", "dylan")
        .put("text/x-ecl", "ecl")
        .put("text/x-eiffel", "eiffel")
        .put("text/x-erlang", "erlang")
        .put("text/x-fortran", "fortran")
        .put("text/x-feature", "gherkin")
        .put("text/x-go", "go")
        .put("text/x-groovy", "groovy")
        .put("text/x-haml", "haml")
        .put("text/x-haskell", "haskell")
        .put("text/x-haxe", "haxe")
        .put("text/x-hxml", "hxml")
        .put("application/x-ejs", "htmlembedded")
        .put("application/x-aspx", "htmlembedded")
        .put("application/x-jsp", "htmlembedded")
        .put("application/x-erb", "htmlembedded")
        .put("text/html", "htmlmixed")
        .put("message/http", "http")
        .put("text/x-jade", "jade")
        .put("text/javascript", "javascript")
        .put("text/ecmascript", "javascript")
        .put("application/javascript", "javascript")
        .put("application/ecmascript", "javascript")
        .put("application/json", "javascript")
        .put("application/x-json", "javascript")
        .put("application/ld+json", "javascript")
        .put("text/typescript", "javascript")
        .put("application/typescript", "javascript")
        .put("text/x-julia", "julia")
        .put("text/x-livescript", "livescript")
        .put("text/x-lua", "lua")
        .put("text/x-markdown", "markdown")
        .put("text/mirc", "mirc")
        .put("text/x-ocaml", "mllike")
        .put("text/x-fsharp", "mllike")
        .put("text/nginx", "text/x-nginx-conf")
        .put("text/n-triples", "ntriples")
        .put("text/x-octave", "octave")
        .put("text/x-pascal", "pascal")
        .put("text/x-perl", "perl")
        .put("application/x-httpd-php", "php")
        .put("application/x-httpd-php-open", "php")
        .put("text/x-php", "clike")
        .put("text/x-pig", "pig")
        .put("text/x-properties", "properties")
        .put("text/x-ini", "properties")
        .put("text/x-puppet", "puppet")
        .put("text/x-python", "python")
        .put("text/x-cython", "python")
        .put("text/x-q", "q")
        .put("text/x-rsrc", "r")
        .put("text/x-rpm-changes", "rpm-changes")
        .put("text/x-rpm-spec", "rpm-spec")
        .put("text/x-rst", "rst")
        .put("text/x-ruby", "ruby")
        .put("text/x-rustsrc", "rust")
        .put("text/x-sass", "sass")
        .put("text/x-scheme", "scheme")
        .put("text/x-sh", "shell")
        .put("application/sieve", "sieve")
        .put("text/x-stsrc", "smalltalk")
        .put("text/x-smarty", "smartymixed")
        .put("text/x-solr", "solr")
        .put("application/x-sparql-query", "sparql")
        .put("text/x-sql", "sql")
        .put("text/x-mssql", "sql")
        .put("text/x-mysql", "sql")
        .put("text/x-mariadb", "sql")
        .put("text/x-cassandra", "sql")
        .put("text/x-plsql", "sql")
        .put("text/x-hive", "sql")
        .put("text/x-stex", "stex")
        .put("text/x-latex", "stex")
        .put("text/x-tcl", "tcl")
        .put("text/x-tiddlywiki", "tiddlywiki")
        .put("text/tiki", "tiki")
        .put("text/x-toml", "toml")
        .put("text/turtle", "turtle")
        .put("text/x-vb", "vb")
        .put("text/vbscript", "vbscript")
        .put("text/velocity", "velocity")
        .put("text/x-verilog", "verilog")
        .put("text/x-systemverilog", "systemverilog")
        .put("text/xml", "xml")
        .put("application/xml", "xml")
        .put("application/xquery", "xquery")
        .put("text/x-yaml", "yaml")
        .put("text/x-z80", "z80")
        // End autogenerated mappings.

        // Additional mappings by hand where MimeUtil and CodeMirror disagree.
        .put("application/x-javascript", "javascript")
        .put("application/x-shellscript", "shell")
        .put("text/x-h", "clike")
        .put("text/x-java-source", "clike")
        .build();

  private static final ImmutableSet<String> CSS_MODES =
      ImmutableSet.<String> of("tiki", "tiddlywiki");

  private static final MimeUtil2 MIME_UTIL = new MimeUtil2();
  static {
    MIME_UTIL.registerMimeDetector("eu.medsea.mimeutil.detector.ExtensionMimeDetector");
    MIME_UTIL.registerMimeDetector("eu.medsea.mimeutil.detector.MagicMimeMimeDetector");
  }

  public static String getMode(String path, byte[] content) {
    return BY_MIME_TYPE.get(getMimeType(path, content).toString());
  }

  public static Map<String, ?> toSoyData(String staticPrefix, String path, byte[] content) {
    String mode = getMode(path, content);
    if (mode == null) {
      return ImmutableMap.of();
    }
    Map<String, String> data = Maps.newHashMapWithExpectedSize(3);
    data.put("mode", mode);
    String prefix = staticPrefix + "codemirror/mode/" + mode + "/" + mode;
    data.put("modeJs", prefix + ".js");
    if (CSS_MODES.contains(mode)) {
      data.put("modeCss", prefix + ".css");
    }
    return data;
  }

  @SuppressWarnings("unchecked")
  private static MimeType getMimeType(String path, byte[] content) {
    Set<MimeType> mimeTypes = Sets.newHashSet();
    if (content != null && content.length > 0) {
      try {
        mimeTypes.addAll(MIME_UTIL.getMimeTypes(content));
      } catch (MimeException e) {
        log.warn("Unable to determine MIME type from content", e);
      }
    }
    try {
      mimeTypes.addAll(MIME_UTIL.getMimeTypes(path));
    } catch (MimeException e) {
      log.warn("Unable to determine MIME type from path", e);
    }

    if (isUnknownType(mimeTypes)) {
      return MimeUtil2.UNKNOWN_MIME_TYPE;
    }

    return Ordering.natural().onResultOf(new Function<MimeType, Integer>() {
      @Override
      public Integer apply(MimeType input) {
        return input.getSpecificity();
      }
    }).sortedCopy(mimeTypes).get(0);
  }

  private static boolean isUnknownType(Collection<MimeType> mimeTypes) {
    if (mimeTypes.isEmpty()) {
      return true;
    }
    return mimeTypes.size() == 1
        && mimeTypes.contains(MimeUtil2.UNKNOWN_MIME_TYPE);
  }
}
