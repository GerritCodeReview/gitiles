{
  "comments": [
    {
      "key": {
        "uuid": "1a3699a5_a57e9cde",
        "filename": "java/com/google/gitiles/VisibilityChecker.java",
        "patchSetId": 11
      },
      "lineNbr": 115,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-11-25T21:32:19Z",
      "side": 1,
      "message": "can inline this:\n\n  ImmutableList\u003cRevCommit\u003e starts \u003d starts(walk, oids);\n  return !walk.createReachabilityChecker()\n    .areAllReachable(ImmutableList.of(commit), starts).isPresent();\n\nThe areAllReachable API is a bit confusing. The name suggests it will return a boolean, but instead, it returns an Optional\u003cRevCommit\u003e. Is it too late to simplify it?",
      "revId": "458efdc6630c470f6155231a234e87c1867037fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6659c6cd_b6516002",
        "filename": "java/com/google/gitiles/VisibilityChecker.java",
        "patchSetId": 11
      },
      "lineNbr": 115,
      "author": {
        "id": 1072453
      },
      "writtenOn": "2019-11-25T22:17:15Z",
      "side": 1,
      "message": "The Optional was the way to tell the caller what wasn\u0027t reachable. See UploadPack#checkNotAdvertisedWants, where it needs to return a \"want not valid xxxxx\" to the client.\n\nWe could rename the function, but I don\u0027t have good ideas: findUnreachable()? filterUnreachable? getUnreachable? discardReachable?\n\nIn JGit 5.6 we will change the API from Collection to Stream, so it is good moment to tune it.",
      "parentUuid": "1a3699a5_a57e9cde",
      "revId": "458efdc6630c470f6155231a234e87c1867037fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0f9aa4b_1453e1b8",
        "filename": "java/com/google/gitiles/VisibilityChecker.java",
        "patchSetId": 11
      },
      "lineNbr": 115,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-11-25T22:51:19Z",
      "side": 1,
      "message": "\u003e We could rename the function, but I don\u0027t have good ideas: findUnreachable() filterUnreachable? getUnreachable? discardReachable?\n\nLet\u0027s discuss in JGit upstream.",
      "parentUuid": "6659c6cd_b6516002",
      "revId": "458efdc6630c470f6155231a234e87c1867037fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52769f01_eb2c0ca0",
        "filename": "java/com/google/gitiles/VisibilityChecker.java",
        "patchSetId": 11
      },
      "lineNbr": 122,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-11-25T21:32:19Z",
      "side": 1,
      "message": "Could this return an ImmutableList?",
      "range": {
        "startLine": 122,
        "startChar": 17,
        "endLine": 122,
        "endChar": 38
      },
      "revId": "458efdc6630c470f6155231a234e87c1867037fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c26f5909_2af239eb",
        "filename": "java/com/google/gitiles/VisibilityChecker.java",
        "patchSetId": 11
      },
      "lineNbr": 122,
      "author": {
        "id": 1072453
      },
      "writtenOn": "2019-11-25T22:17:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52769f01_eb2c0ca0",
      "range": {
        "startLine": 122,
        "startChar": 17,
        "endLine": 122,
        "endChar": 38
      },
      "revId": "458efdc6630c470f6155231a234e87c1867037fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aab127b7_482c3551",
        "filename": "java/com/google/gitiles/VisibilityChecker.java",
        "patchSetId": 11
      },
      "lineNbr": 130,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-11-25T21:32:19Z",
      "side": 1,
      "message": "What is a stray ref? I think the relevant point here is that we\u0027re only committing reachability for commits. Refs pointing to a tree *do* affect reachability, but not for commits.\n\nSo this comment can saying something like\n\n // Ignore, doesn\u0027t affect commit reachability.\n\nWhen would MissingObjectException occur? Do we actually need to catch that one? (If we\u0027re catching it to avoid unrelated changes in this commit, then that\u0027s good, but might be worth a TODO.)\n\nThe javadoc for isReachableFrom says \"Missing ids or ids pointing to wrong kind of objects are ignored\" --- are these actually always from refs, or do they sometimes come from some other source?",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 130,
        "endChar": 72
      },
      "revId": "458efdc6630c470f6155231a234e87c1867037fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "316720f9_9d32a050",
        "filename": "java/com/google/gitiles/VisibilityChecker.java",
        "patchSetId": 11
      },
      "lineNbr": 130,
      "author": {
        "id": 1072453
      },
      "writtenOn": "2019-11-25T22:17:15Z",
      "side": 1,
      "message": "Thanks for the commet.\n\n#isVisible is only called from RevisionParser and the ids have already been parse in the RevWalk, so at this point there shouldn\u0027t be any MissingObjectException (unless I missed some calling path?). I added a TODO. A later commit can make it an AssertionError().\n\nThe objectIds can come directly from the URL, so they are not necessarily pointed by a reference. I removed the misleading \"pointing\" in the javadoc.",
      "parentUuid": "aab127b7_482c3551",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 130,
        "endChar": 72
      },
      "revId": "458efdc6630c470f6155231a234e87c1867037fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}